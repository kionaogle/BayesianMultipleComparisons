q()
q()
q()
install.packages("devtools")
library(devtools)
install_github("NEONScience/NEON-utilities/neonUtilities", dependencies = TRUE)
install_github("NEONscience/NEON-geolocation/geoNEON")
install.packages("raster")
source("http://bioconductor.org/biocLite.R")
library(devtools)
install_github("NEONScience/NEON-utilities/neonUtilities", dependencies = TRUE)
install_github("NEONscience/NEON-geolocation/geoNEON")
biocLite("rhdf5")
update.packages()
q()
a = 10
c = 10
b = -2
d = 0.01
N = 500
K = 2
y.temp = matrix(data = NA, nrow=N, ncol=K)
y.I = matrix(data = NA, nrow=N, ncol=K)
mu = matrix(data = NA, nrow=N, ncol=K)
x = matrix(data = NA, nrow=N, ncol=K)
y.pred = matrix(data = NA, nrow=N, ncol=K)
for(i in 1:N){
for(k in 1:K){
y.temp[i,k] = rnorm(n=1, mean = mu[i,k], sd = 1)
y.I[i] = rbinom(n=1, size=1,p=0.1)
mu[i,k] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
}
x[i] = runif(n=1,min=1,max=100)
y.pred[i,1] = a + b*x[i]
y.pred[i,2] = c*exp(-d*x[i])
}
warnings()
head(mu)
for(i in 1:N){
x[i] = runif(n=1,min=1,max=100)
y.pred[i,1] = a + b*x[i]
y.pred[i,2] = c*exp(-d*x[i])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.1)
mu[i,k] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
y.temp[i,k] = rnorm(n=1, mean = mu[i,k], sd = 1)
}
}
plot(x, y.pred[,1])
for(i in 1:N){
x[i,1] = runif(n=1,min=1,max=100)
x[i,2] = x[i,1]
y.pred[i,1] = a + b*x[i,1]
y.pred[i,2] = c*exp(-d*x[i,2])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.1)
mu[i,k] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
y.temp[i,k] = rnorm(n=1, mean = mu[i,k], sd = 1)
}
}
plot(x, y.pred[,1])
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
a = 10
c = 10
b = -.02
d = 0.01
N = 500
K = 2
y.temp = matrix(data = NA, nrow=N, ncol=K)
y.I = matrix(data = NA, nrow=N, ncol=K)
mu = matrix(data = NA, nrow=N, ncol=K)
x = matrix(data = NA, nrow=N, ncol=K)
y.pred = matrix(data = NA, nrow=N, ncol=K)
for(i in 1:N){
x[i,1] = runif(n=1,min=1,max=100)
x[i,2] = x[i,1]
y.pred[i,1] = a + b*x[i,1]
y.pred[i,2] = c*exp(-d*x[i,2])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.1)
mu[i,k] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
y.temp[i,k] = rnorm(n=1, mean = mu[i,k], sd = 1)
}
}
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
a = 10
c = 10
b = -.1
d = 0.01
N = 500
K = 2
y.temp = matrix(data = NA, nrow=N, ncol=K)
y.I = matrix(data = NA, nrow=N, ncol=K)
mu = matrix(data = NA, nrow=N, ncol=K)
x = matrix(data = NA, nrow=N, ncol=K)
y.pred = matrix(data = NA, nrow=N, ncol=K)
for(i in 1:N){
x[i,1] = runif(n=1,min=1,max=100)
x[i,2] = x[i,1]
y.pred[i,1] = a + b*x[i,1]
y.pred[i,2] = c*exp(-d*x[i,2])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.1)
mu[i,k] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
y.temp[i,k] = rnorm(n=1, mean = mu[i,k], sd = 1)
}
}
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
a = 10
c = 10
b = -.08
d = 0.01
N = 500
K = 2
y.temp = matrix(data = NA, nrow=N, ncol=K)
y.I = matrix(data = NA, nrow=N, ncol=K)
mu = matrix(data = NA, nrow=N, ncol=K)
x = matrix(data = NA, nrow=N, ncol=K)
y.pred = matrix(data = NA, nrow=N, ncol=K)
for(i in 1:N){
x[i,1] = runif(n=1,min=1,max=100)
x[i,2] = x[i,1]
y.pred[i,1] = a + b*x[i,1]
y.pred[i,2] = c*exp(-d*x[i,2])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.1)
mu[i,k] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
y.temp[i,k] = rnorm(n=1, mean = mu[i,k], sd = 1)
}
}
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
a = 10
c = 10
b = -.09
d = 0.01
N = 500
K = 2
y.temp = matrix(data = NA, nrow=N, ncol=K)
y.I = matrix(data = NA, nrow=N, ncol=K)
mu = matrix(data = NA, nrow=N, ncol=K)
x = matrix(data = NA, nrow=N, ncol=K)
y.pred = matrix(data = NA, nrow=N, ncol=K)
for(i in 1:N){
x[i,1] = runif(n=1,min=1,max=100)
x[i,2] = x[i,1]
y.pred[i,1] = a + b*x[i,1]
y.pred[i,2] = c*exp(-d*x[i,2])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.1)
mu[i,k] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
y.temp[i,k] = rnorm(n=1, mean = mu[i,k], sd = 1)
}
}
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
plot(x[,1], y.temp[,1])
points(x[,1], y.temp[,2],col="red")
for(i in 1:N){
x[i,1] = runif(n=1,min=1,max=100)
x[i,2] = x[i,1]
y.pred[i,1] = a + b*x[i,1]
y.pred[i,2] = c*exp(-d*x[i,2])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.1)
mu[i,k] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
y.temp[i,k] = rnorm(n=1, mean = mu[i,k], sd = .5)
}
}
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
plot(x[,1], y.temp[,1])
points(x[,1], y.temp[,2],col="red")
a = 10
c = 10
b = -.09
d = 0.01
N = 500
K = 1.7
y.temp = matrix(data = NA, nrow=N, ncol=K)
y.I = matrix(data = NA, nrow=N, ncol=K)
mu = matrix(data = NA, nrow=N, ncol=K)
x = matrix(data = NA, nrow=N, ncol=K)
y.pred = matrix(data = NA, nrow=N, ncol=K)
for(i in 1:N){
x[i,1] = runif(n=1,min=1,max=100)
x[i,2] = x[i,1]
y.pred[i,1] = a + b*x[i,1]
y.pred[i,2] = c*exp(-d*x[i,2])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.1)
mu[i,k] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
y.temp[i,k] = rnorm(n=1, mean = mu[i,k], sd = .5)
}
}
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
plot(x[,1], y.temp[,1])
points(x[,1], y.temp[,2],col="red")
a = 10
c = 10
b = -.09
d = 0.008
N = 500
K = 2
y.temp = matrix(data = NA, nrow=N, ncol=K)
y.I = matrix(data = NA, nrow=N, ncol=K)
mu = matrix(data = NA, nrow=N, ncol=K)
x = matrix(data = NA, nrow=N, ncol=K)
y.pred = matrix(data = NA, nrow=N, ncol=K)
for(i in 1:N){
x[i,1] = runif(n=1,min=1,max=100)
x[i,2] = x[i,1]
y.pred[i,1] = a + b*x[i,1]
y.pred[i,2] = c*exp(-d*x[i,2])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.1)
mu[i,k] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
y.temp[i,k] = rnorm(n=1, mean = mu[i,k], sd = .5)
}
}
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
plot(x[,1], y.temp[,1])
points(x[,1], y.temp[,2],col="red")
plot(x[,1], y.temp[,1])
a = 10
c = 10
b = -.09
d = 0.008
N = 500
K = 2
y.temp = matrix(data = NA, nrow=N, ncol=K)
y.I = matrix(data = NA, nrow=N, ncol=K)
mu = matrix(data = NA, nrow=N, ncol=K)
x = matrix(data = NA, nrow=N, ncol=K)
y.pred = matrix(data = NA, nrow=N, ncol=K)
for(i in 1:N){
x[i,1] = runif(n=1,min=1,max=100)
x[i,2] = x[i,1]
mu[i,1] = a + b*x[i,1]
mu[i,2] = c*exp(-d*x[i,2])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.1)
y.pred[i,k] = rnorm(n=1, mean = mu[i,k], sd = .5)
}
y.temp[i,1] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
}
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
a = 10
c = 10
b = -.09
d = 0.008
N = 500
K = 2
y.temp = matrix(data = NA, nrow=N, ncol=K)
a = 10
c = 10
b = -.09
d = 0.008
N = 500
K = 2
y.temp = matrix(data = NA, nrow=N, ncol=K)
y.I = matrix(data = NA, nrow=N, ncol=K)
mu = matrix(data = NA, nrow=N, ncol=K)
x = matrix(data = NA, nrow=N, ncol=K)
y.pred = matrix(data = NA, nrow=N, ncol=K)
for(i in 1:N){
x[i,1] = runif(n=1,min=1,max=100)
x[i,2] = x[i,1]
mu[i,1] = a + b*x[i,1]
mu[i,2] = c*exp(-d*x[i,2])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.1)
y.pred[i,k] = rnorm(n=1, mean = mu[i,k], sd = .5)
}
y.temp[i,1] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
}
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
plot(x[,1], y.temp[,1])
for(i in 1:N){
x[i,1] = runif(n=1,min=1,max=100)
x[i,2] = x[i,1]
mu[i,1] = a + b*x[i,1]
mu[i,2] = c*exp(-d*x[i,2])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.2)
y.pred[i,k] = rnorm(n=1, mean = mu[i,k], sd = .5)
}
y.temp[i,1] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
}
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
plot(x[,1], y.temp[,1])
q()
setwd("Z:/common/Projects/mult_comparison/Github/BayesianMultipleComparisons/RealExamples/AllometricScaling")
n.chains <- 3
n.burnin <- 100
adaptits <- 1000
hbn.burnin <- 100
hbits <- 2000
hbthin <- 1
cpn.burnin <- 100
cpits <- 2000
cpthin <- 1
nhn.burnin <- 100
nhits <- 2000
nhthin <- 1
chuck = read.csv("data/ChuckDataMatrix.csv")
# Number of species and number of pairwise comparisons:
Nsp = 49
Ncomp = Nsp*(Nsp-1)/2
# Indices for species pairwise comparisons
pairID = matrix(data =NA, nrow = Ncomp, ncol=2)
ii = 0
for(s1 in 1:(Nsp-1)){
for(s2 in (s1+1):Nsp){
ii = ii +1
pairID[ii,1] = s1 # first species in pair
pairID[ii,2] = s2 # second species in pair
}
}
# Create data list for supplying to Jags, for HB model:
data = list(N=1162, Nsp=Nsp, R=structure(.Data=c(1,0,0,1),.Dim=c(2,2)), pairID = pairID, Ncomp = Ncomp,
SP = chuck$SP, LogMass = chuck$LogMass, LogLength = chuck$LogLength, LogDiameter = chuck$LogDiameter,
nVars=2, pi=pi)
data_cp = list(N=1162, Nsp=Nsp, R=structure(.Data=c(1,0,0,1),.Dim=c(2,2)),
SP = chuck$SP, LogMass = chuck$LogMass, LogLength = chuck$LogLength, LogDiameter = chuck$LogDiameter,
nVars=2, pi=pi)
# Get initials for supplying to Jags
# For HB model (will load chuck_inits):
source("inits/R inits chuck HB.R")
# For CP model (will load chuck_inits_CP):
source("inits/R inits chuck CP.R")
# For NH model (will load chuck_inits_NH):
load("inits/R inits chuck NH.Rdata")
# Hierarchical model:
jm.hb <- jags.model(file = "models/R model HB.R", data = data, inits = chuck_inits, n.chains = n.chains, n.adapt = adaptits)
if("rjags" %in% installed.packages()[,1] == FALSE){
install.packages("rjags", repos="https://cran.cnr.berkeley.edu/")
library(rjags)
} else{
library(rjags)
}
if("coda" %in% installed.packages()[,1] == FALSE){
install.packages("coda", repos="https://cran.cnr.berkeley.edu/")
library(coda)
} else{
library(coda)
}
if("mcmcplots" %in% installed.packages()[,1] == FALSE){
install.packages("mcmcplots", repos="https://cran.cnr.berkeley.edu/")
library(mcmcplots)
} else{
library(mcmcplots)
}
# Hierarchical model:
jm.hb <- jags.model(file = "models/R model HB.R", data = data, inits = chuck_inits, n.chains = n.chains, n.adapt = adaptits)
# Complete pooling model:
jm.cp <- jags.model(file = "models/R model CP.R", data = data_cp, inits = chuck_inits_CP, n.chains = n.chains, n.adapt = adaptits)
# Non-hierarchical model:
jm.nh <- jags.model(file = "models/R model NH.R", data = data_cp, inits = chuck_inits_NH, n.chains = n.chains, n.adapt = adaptits)
jm.hb.names <- c(variable.names(jm.hb), "deviance")
jm.cp.names <- c(variable.names(jm.cp), "deviance")
jm.nh.names <- c(variable.names(jm.nh), "deviance")
load.module("dic")
update(jm.hb, n.iter=hbn.burnin)
codaHB =coda.samples(jm.hb,variable.names=jm.hb.names,
n.iter=hbits, thin=hbthin)
update(jm.cp, n.iter=cpn.burnin)
codaCP =coda.samples(jm.cp,variable.names=jm.cp.names,
n.iter=cpits, thin=cpthin)
update(jm.nh, n.iter=nhn.burnin)
codaNH =coda.samples(jm.nh,variable.names=jm.nh.names,
n.iter=nhits, thin=nhthin)
mcmcplot(codaHB, parms=c("deviance", "alpha", "beta"))
mcmcplot(codaCP, parms=c("deviance", "alpha", "beta"))
mcmcplot(codaNH, parms=c("deviance", "alpha", "beta"))
mcmcplot(codaCP, parms=c("deviance", "alpha", "beta"))
source("source/PPI.R")
ppi.data <- PPI(codahb = codaHB, codanh = codaNH, codacp = codaCP, name="lpd")
q()
