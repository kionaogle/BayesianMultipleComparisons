y.temp[i,k] = rnorm(n=1, mean = mu[i,k], sd = .5)
}
}
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
plot(x[,1], y.temp[,1])
points(x[,1], y.temp[,2],col="red")
a = 10
c = 10
b = -.09
d = 0.01
N = 500
K = 1.7
y.temp = matrix(data = NA, nrow=N, ncol=K)
y.I = matrix(data = NA, nrow=N, ncol=K)
mu = matrix(data = NA, nrow=N, ncol=K)
x = matrix(data = NA, nrow=N, ncol=K)
y.pred = matrix(data = NA, nrow=N, ncol=K)
for(i in 1:N){
x[i,1] = runif(n=1,min=1,max=100)
x[i,2] = x[i,1]
y.pred[i,1] = a + b*x[i,1]
y.pred[i,2] = c*exp(-d*x[i,2])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.1)
mu[i,k] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
y.temp[i,k] = rnorm(n=1, mean = mu[i,k], sd = .5)
}
}
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
plot(x[,1], y.temp[,1])
points(x[,1], y.temp[,2],col="red")
a = 10
c = 10
b = -.09
d = 0.008
N = 500
K = 2
y.temp = matrix(data = NA, nrow=N, ncol=K)
y.I = matrix(data = NA, nrow=N, ncol=K)
mu = matrix(data = NA, nrow=N, ncol=K)
x = matrix(data = NA, nrow=N, ncol=K)
y.pred = matrix(data = NA, nrow=N, ncol=K)
for(i in 1:N){
x[i,1] = runif(n=1,min=1,max=100)
x[i,2] = x[i,1]
y.pred[i,1] = a + b*x[i,1]
y.pred[i,2] = c*exp(-d*x[i,2])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.1)
mu[i,k] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
y.temp[i,k] = rnorm(n=1, mean = mu[i,k], sd = .5)
}
}
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
plot(x[,1], y.temp[,1])
points(x[,1], y.temp[,2],col="red")
plot(x[,1], y.temp[,1])
a = 10
c = 10
b = -.09
d = 0.008
N = 500
K = 2
y.temp = matrix(data = NA, nrow=N, ncol=K)
y.I = matrix(data = NA, nrow=N, ncol=K)
mu = matrix(data = NA, nrow=N, ncol=K)
x = matrix(data = NA, nrow=N, ncol=K)
y.pred = matrix(data = NA, nrow=N, ncol=K)
for(i in 1:N){
x[i,1] = runif(n=1,min=1,max=100)
x[i,2] = x[i,1]
mu[i,1] = a + b*x[i,1]
mu[i,2] = c*exp(-d*x[i,2])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.1)
y.pred[i,k] = rnorm(n=1, mean = mu[i,k], sd = .5)
}
y.temp[i,1] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
}
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
a = 10
c = 10
b = -.09
d = 0.008
N = 500
K = 2
y.temp = matrix(data = NA, nrow=N, ncol=K)
a = 10
c = 10
b = -.09
d = 0.008
N = 500
K = 2
y.temp = matrix(data = NA, nrow=N, ncol=K)
y.I = matrix(data = NA, nrow=N, ncol=K)
mu = matrix(data = NA, nrow=N, ncol=K)
x = matrix(data = NA, nrow=N, ncol=K)
y.pred = matrix(data = NA, nrow=N, ncol=K)
for(i in 1:N){
x[i,1] = runif(n=1,min=1,max=100)
x[i,2] = x[i,1]
mu[i,1] = a + b*x[i,1]
mu[i,2] = c*exp(-d*x[i,2])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.1)
y.pred[i,k] = rnorm(n=1, mean = mu[i,k], sd = .5)
}
y.temp[i,1] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
}
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
plot(x[,1], y.temp[,1])
for(i in 1:N){
x[i,1] = runif(n=1,min=1,max=100)
x[i,2] = x[i,1]
mu[i,1] = a + b*x[i,1]
mu[i,2] = c*exp(-d*x[i,2])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.2)
y.pred[i,k] = rnorm(n=1, mean = mu[i,k], sd = .5)
}
y.temp[i,1] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
}
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
plot(x[,1], y.temp[,1])
q()
source('Z:/common/Projects/mult_comparison/Github/BayesianMultipleComparisons/RealExamples/OrangeTrees/OrangeTrees_script.R')
setwd("Z:/common/Projects/mult_comparison/Github/BayesianMultipleComparisons/RealExamples/OrangeTrees")
if("rjags" %in% installed.packages()[,1] == FALSE){
install.packages("rjags", repos="https://cran.cnr.berkeley.edu/")
library(rjags)
} else{
library(rjags)
}
if("coda" %in% installed.packages()[,1] == FALSE){
install.packages("coda", repos="https://cran.cnr.berkeley.edu/")
library(coda)
} else{
library(coda)
}
if("coda" %in% installed.packages()[,1] == FALSE){
install.packages("coda", repos="https://cran.cnr.berkeley.edu/")
library(mcmcplots)
} else{
library(mcmcplots)
}
if("rjags" %in% installed.packages()[,1] == FALSE){
install.packages("rjags", repos="https://cran.cnr.berkeley.edu/")
library(rjags)
} else{
library(rjags)
}
if("coda" %in% installed.packages()[,1] == FALSE){
install.packages("coda", repos="https://cran.cnr.berkeley.edu/")
library(coda)
} else{
library(coda)
}
if("mcmcplots" %in% installed.packages()[,1] == FALSE){
install.packages("mcmcplots", repos="https://cran.cnr.berkeley.edu/")
library(mcmcplots)
} else{
library(mcmcplots)
}
n.chains <- 3
n.burnin <- 0
adaptits <- 1000
hbn.burnin <- 10000
hbits <- 2000000
hbthin <- 1000
cpn.burnin <- 10000
cpits <- 2000000
cpthin <- 1000
nhn.burnin <- 10000
nhits <- 2000000
nhthin <- 1000
indat <- read.csv("data/treegrowth.csv")
attach(indat)
dat <- list(Y=Y, Tree=Tree, Time=Time, N=nrow(indat), Ntree=length(unique(Tree)), Nparms=3)
# Number of trees and number of pairwise comparisons:
Ntree = dat$Ntree
Ncomp = Ntree*(Ntree-1)/2
# Indices for tree-tree pairwise comparisons
pairID = matrix(data =NA, nrow = Ncomp, ncol=2)
ii = 0
for(s1 in 1:(Ntree-1)){
for(s2 in (s1+1):Ntree){
ii = ii +1
pairID[ii,1] = s1
pairID[ii,2] = s2
}
}
# Create data list for supplying to Jags:
# For HB model:
data = list(Y=Y, Tree=Tree, Time=Time, N=nrow(indat), Ntree=length(unique(Tree)), Nparms=3, Ncomp=Ncomp, pairID = pairID)
# For CP and NH models:
data.cp = list(Y=Y, Tree=Tree, Time=Time, N=nrow(indat), Ntree=length(unique(Tree)), Nparms=3)
inits.hb = list(list(log.mu.b=log(c(190,40, 20)),tau = 0.005, sig.log.b=c(0.1,0.5,2)),
list(log.mu.b=log(c(150,30, 60)),tau = 0.05, sig.log.b = c(0.5,0.2,0.5)),
list(log.mu.b=log(c(195,35, 40)),tau = 0.015, sig.log.b = c(1,1,1.5)))
# Initialize model:
jm.hb <- jags.model(file = "models/R model trees HB.R", data = data, n.chains = n.chains, n.adapt = adaptits, inits=inits.hb)
inits.hb = list(list(log.mu.b=log(c(190,40, 20)),tau = 0.005, tau.log.b = 1/(c(0.1,0.5,2)^2)),
list(log.mu.b=log(c(150,30, 60)),tau = 0.05, tau.log.b = 1/(c(0.5,0.2,0.5)^2)),
list(log.mu.b=log(c(195,35, 40)),tau = 0.015, tau.log.b = 1/(c(1,1,1.5))^2))
inits.hb[[1]]$tau.log.b
# Initialize model:
jm.hb <- jags.model(file = "models/R model trees HB.R", data = data, n.chains = n.chains, n.adapt = adaptits, inits=inits.hb)
# Complete pooling model:
# Set initials:
inits.cp = list(list(log.mu.b=log(c(190,40, 20)),tau = 0.005),
list(log.mu.b=log(c(150,30, 60)),tau = 0.05),
list(log.mu.b=log(c(195,35, 40)),tau = 0.015))
# Initialize model:
jm.cp <- jags.model(file = "models/R model trees CP.R", data = data.cp, n.chains = n.chains, n.adapt = adaptits, inits=inits.cp)
load("inits/nh_inits.Rdata")
# Initialize model:
jm.nh <- jags.model(file = "models/R model trees NH.R", data = data.cp, n.chains = n.chains, n.adapt = adaptits, inits=inits)
jm.hb.names <- c(variable.names(jm.hb), "deviance")
jm.cp.names <- c(variable.names(jm.cp), "deviance")
jm.nh.names <- c(variable.names(jm.nh), "deviance")
load.module("dic")
hbn.burnin <- 1000
hbits <- 2000
hbthin <- 1
cpn.burnin <- 1000
cpits <- 2000
cpthin <- 1
nhn.burnin <- 1000
nhits <- 2000
nhthin <- 1
update(jm.hb, n.iter=hbn.burnin)
codaHB =coda.samples(jm.hb,variable.names=jm.hb.names,
n.iter=hbits, thin=hbthin)
update(jm.cp, n.iter=cpn.burnin)
codaCP =coda.samples(jm.cp,variable.names=jm.cp.names,
n.iter=cpits, thin=cpthin)
update(jm.nh, n.iter=nhn.burnin)
codaNH =coda.samples(jm.nh,variable.names=jm.nh.names,
n.iter=nhits, thin=nhthin)
source("source/PPI.R")
ppi.data <- PPI(codahb = codaHB, codanh = codaNH, codacp = codaCP, name="lpd")
setwd("Z:/common/Projects/mult_comparison/Github/BayesianMultipleComparisons/RealExamples/PlantWaterStress")
if("rjags" %in% installed.packages()[,1] == FALSE){
install.packages("rjags", repos="https://cran.cnr.berkeley.edu/")
library(rjags)
} else{
library(rjags)
}
if("coda" %in% installed.packages()[,1] == FALSE){
install.packages("coda", repos="https://cran.cnr.berkeley.edu/")
library(coda)
} else{
library(coda)
}
if("mcmcplots" %in% installed.packages()[,1] == FALSE){
install.packages("mcmcplots", repos="https://cran.cnr.berkeley.edu/")
library(mcmcplots)
} else{
library(mcmcplots)
}
n.chains <- 3
n.burnin <- 0
adaptits <- 1000
hbn.burnin <- 10000
hbits <- 2000000
hbthin <- 1000
cpn.burnin <- 10000
cpits <- 2000000
cpthin <- 1000
nhn.burnin <- 10000
nhits <- 2000000
nhthin <- 1000
hbn.burnin <- 1000
hbits <- 2000
hbthin <- 1
cpn.burnin <- 1000
cpits <- 2000
cpthin <- 1
nhn.burnin <- 1000
nhits <- 2000
nhthin <- 1
n.chains <- 3
n.burnin <- 0
adaptits <- 1000
hbn.burnin <- 10000
hbits <- 2000000
hbthin <- 1000
cpn.burnin <- 10000
cpits <- 2000000
cpthin <- 1000
nhn.burnin <- 10000
nhits <- 2000000
nhthin <- 1000
hbn.burnin <- 1000
hbits <- 2000
hbthin <- 1
cpn.burnin <- 1000
cpits <- 2000
cpthin <- 1
nhn.burnin <- 1000
nhits <- 2000
nhthin <- 1
chuck = read.csv("data/ChuckDataMatrix.csv")
# Number of species and number of pairwise comparisons:
Nsp = 49
Ncomp = Nsp*(Nsp-1)/2
# Indices for species pairwise comparisons
pairID = matrix(data =NA, nrow = Ncomp, ncol=2)
ii = 0
for(s1 in 1:(Nsp-1)){
for(s2 in (s1+1):Nsp){
ii = ii +1
pairID[ii,1] = s1 # first species in pair
pairID[ii,2] = s2 # second species in pair
}
}
data = list(N=1162, Nsp=Nsp, R=structure(.Data=c(1,0,0,1),.Dim=c(2,2)), pairID = pairID, Ncomp = Ncomp,
SP = chuck$SP, LogMass = chuck$LogMass, LogLength = chuck$LogLength, LogDiameter = chuck$LogDiameter,
nVars=2, pi=pi)
# Get initials for supplying to Jags
source("inits/R inits chuck v1.R")
setwd("Z:/common/Projects/mult_comparison/Github/BayesianMultipleComparisons/RealExamples/AllometricScaling")
chuck = read.csv("data/ChuckDataMatrix.csv")
# Number of species and number of pairwise comparisons:
Nsp = 49
Ncomp = Nsp*(Nsp-1)/2
# Indices for species pairwise comparisons
pairID = matrix(data =NA, nrow = Ncomp, ncol=2)
ii = 0
for(s1 in 1:(Nsp-1)){
for(s2 in (s1+1):Nsp){
ii = ii +1
pairID[ii,1] = s1 # first species in pair
pairID[ii,2] = s2 # second species in pair
}
}
# Create data list for supplying to Jags:
data = list(N=1162, Nsp=Nsp, R=structure(.Data=c(1,0,0,1),.Dim=c(2,2)), pairID = pairID, Ncomp = Ncomp,
SP = chuck$SP, LogMass = chuck$LogMass, LogLength = chuck$LogLength, LogDiameter = chuck$LogDiameter,
nVars=2, pi=pi)
# Get initials for supplying to Jags
source("inits/R inits chuck v1.R")
# Hierarchical model:
jm.hb <- jags.model(file = "models/R model HB_lpd.R", data = data, inits = chuck_inits, n.chains = n.chains, n.adapt = adaptits)
# Hierarchical model:
jm.hb <- jags.model(file = "models/R model HB.R", data = data, inits = chuck_inits, n.chains = n.chains, n.adapt = adaptits)
jm.hb <- jags.model(file = "models/R model HB.R", data = data, inits = chuck_inits, n.chains = n.chains, n.adapt = adaptits)
jm.cp <- jags.model(file = "models/R model CP.R", data = data, inits = chuck_inits, n.chains = n.chains, n.adapt = adaptits)
jm.cp <- jags.model(file = "models/R model CP.R", data = data, inits = chuck_inits_CP, n.chains = n.chains, n.adapt = adaptits)
data_cp = list(N=1162, Nsp=Nsp, R=structure(.Data=c(1,0,0,1),.Dim=c(2,2)),
SP = chuck$SP, LogMass = chuck$LogMass, LogLength = chuck$LogLength, LogDiameter = chuck$LogDiameter,
nVars=2, pi=pi)
jm.cp <- jags.model(file = "models/R model CP.R", data = data_cp, inits = chuck_inits_CP, n.chains = n.chains, n.adapt = adaptits)
source("inits/R inits chuck CP.R")
jm.cp <- jags.model(file = "models/R model CP.R", data = data_cp, inits = chuck_inits_CP, n.chains = n.chains, n.adapt = adaptits)
jm.nh <- jags.model(file = "models/R model NH.R", data = data_cp, inits = chuck_inits_CP, n.chains = n.chains, n.adapt = adaptits)
source("inits/R inits chuck HB.R")
# For CP model (will load chuck_inits_CP):
source("inits/R inits chuck CP.R")
# For NH model (will load chuck_inits_NH):
source("inits/R inits chuck NH.R")
jm.nh <- jags.model(file = "models/R model NH.R", data = data_cp, inits = chuck_inits_NH, n.chains = n.chains, n.adapt = adaptits)
jm.hb.names <- c(variable.names(jm.hb), "deviance")
jm.cp.names <- c(variable.names(jm.cp), "deviance")
load.module("dic")
##### Run / update Hierarchical model #####
update(jm.hb, n.iter=hbn.burnin)
codaHB =coda.samples(jm.hb,variable.names=jm.hb.names,
n.iter=hbits, thin=hbthin)
jm.nh <- jags.model(file = "models/R model NH.R", data = data_cp, n.chains = n.chains, n.adapt = adaptits)
jm.hb.names <- c(variable.names(jm.hb), "deviance")
jm.cp.names <- c(variable.names(jm.cp), "deviance")
jm.nh.names <- c(variable.names(jm.nh), "deviance")
load.module("dic")
update(jm.cp, n.iter=cpn.burnin)
codaCP =coda.samples(jm.cp,variable.names=jm.cp.names,
n.iter=cpits, thin=cpthin)
update(jm.nh, n.iter=nhn.burnin)
codaNH =coda.samples(jm.nh,variable.names=jm.nh.names,
n.iter=nhits, thin=nhthin)
mcmcplot(codaCP, parms=c("deviance", "alpha", "beta"))
source("source/PPI.R")
ppi.data <- PPI(codahb = codaHB, codanh = codaNH, codacp = codaCP, name="lpd")
setwd("Z:/common/Projects/mult_comparison/Github/BayesianMultipleComparisons/RealExamples/DogLearning")
if("rjags" %in% installed.packages()[,1] == FALSE){
install.packages("rjags", repos="https://cran.cnr.berkeley.edu/")
library(rjags)
} else{
library(rjags)
}
if("coda" %in% installed.packages()[,1] == FALSE){
install.packages("coda", repos="https://cran.cnr.berkeley.edu/")
library(coda)
} else{
library(coda)
}
if("mcmcplots" %in% installed.packages()[,1] == FALSE){
install.packages("mcmcplots", repos="https://cran.cnr.berkeley.edu/")
library(mcmcplots)
} else{
library(mcmcplots)
}
n.chains <- 3
n.burnin <- 0
adaptits <- 10000
hbn.burnin <- 0
hbits <- 50000
hbthin <- 25
cpn.burnin <- 0
cpits <- 1000000
cpthin <- 500
nhn.burnin <- 0
nhits <- 1000000
nhthin <- 500
hbn.burnin <- 0
hbits <- 5000
hbthin <- 1
cpn.burnin <- 0
cpits <- 5000
cpthin <- 1
nhn.burnin <- 0
nhits <- 1000
nhthin <- 1
# Load data
d <- read.csv("data/dogshock_matrix.csv", header = F)
Y = as.matrix(d)
#dim(Y)
# Number of dogs and number of pairwise comparisons:
Ndog = nrow(d)
Ncomp = Ndog*(Ndog-1)/2
# Indices for dog pairwise comparisons
pairID = matrix(data =NA, nrow = Ncomp, ncol=2)
ii = 0
for(s1 in 1:(Ndog-1)){
for(s2 in (s1+1):Ndog){
ii = ii +1
pairID[ii,1] = s1 # first dog in pair
pairID[ii,2] = s2 # second dog in pair
}
}
xa <- matrix(NA, nrow=30, ncol=25)
xs <- matrix(NA, nrow=30, ncol=25)
for(i in 1:30){
# Set starting values for the past number of successes (avoiding shock)
xa[i, 1] <- 0
# For the past number of failures (getting shocked)
xs[i, 1] <- 0
for(t in 2:25){
# Sum number of past successes (avoiding shock) prior to trial t
xa[i, t] <- sum(Y[i, 1:(t-1)])
# Sum number of past failures (shocked) prior to trial t
xs[i, t] <- (t-1) - xa[i,t]
}
}
# Create data list for supplying to Jags:
datain <- list(Y=as.matrix(d), Ndog=nrow(d), Ntrial=ncol(d), xa=xa, xs=xs, pairID = pairID, Ncomp = Ncomp)
# Initials for HB model:
initsHB <-list(list(mu.log.alpha = -1, mu.log.beta = -1, tau.log.beta = 10, tau.log.alpha = 10),
list(mu.log.alpha = 1, mu.log.beta = 0, tau.log.beta = 20, tau.log.alpha = 50),
list(mu.log.alpha = -.1, mu.log.beta = .8, tau.log.beta = 1, tau.log.alpha = 5))
# Create data for the CP and NH models by removing quantities from datain that are not
# required for these models:
cpdata <- datain[-c(6, 7)]
nhdata <- datain[-c(6, 7)]
initsHB <-list(list(mu.log.alpha = -1, mu.log.beta = -1, tau.log.beta = 10, tau.log.alpha = 10),
list(mu.log.alpha = 1, mu.log.beta = 0, tau.log.beta = 20, tau.log.alpha = 50),
list(mu.log.alpha = -.1, mu.log.beta = .8, tau.log.beta = 1, tau.log.alpha = 5))
# Initials for CP model:
initsCP <-list(list(log.alpha = -1, log.beta = -1),
list(log.alpha = 1, log.beta = 0),
list(log.alpha = -.1, log.beta = .8))
# Hierarchical model:
jm.hb <- jags.model(file = "models/R_model_dogs_HB.R", data = datain, inits = initsHB, n.chains = n.chains, n.adapt = adaptits)
jm.cp <- jags.model(file = "models/R_model_dogs_CP.R", data = cpdata, inits = initsCP, n.chains = n.chains, n.adapt = adaptits)
jm.nh <- jags.model(file = "models/R_model_dogs_NH.R", data = nhdata, n.chains = n.chains, n.adapt = adaptits)
jm.hb.names <- c(variable.names(jm.hb), "deviance")
jm.cp.names <- c(variable.names(jm.cp), "deviance")
jm.nh.names <- c(variable.names(jm.nh), "deviance")
load.module("dic")
update(jm.hb, n.iter=hbn.burnin)
codaHB =coda.samples(jm.hb,variable.names=jm.hb.names,
n.iter=hbits, thin=hbthin)
n.chains <- 3
n.burnin <- 0
adaptits <- 1000
hbn.burnin <- 0
hbits <- 5000
hbthin <- 1
cpn.burnin <- 0
cpits <- 5000
cpthin <- 1
nhn.burnin <- 0
nhits <- 5000
nhthin <- 1
jm.hb <- jags.model(file = "models/R_model_dogs_HB.R", data = datain, inits = initsHB, n.chains = n.chains, n.adapt = adaptits)
jm.cp <- jags.model(file = "models/R_model_dogs_CP.R", data = cpdata, inits = initsCP, n.chains = n.chains, n.adapt = adaptits)
jm.nh <- jags.model(file = "models/R_model_dogs_NH.R", data = nhdata, n.chains = n.chains, n.adapt = adaptits)
jm.hb.names <- c(variable.names(jm.hb), "deviance")
jm.cp.names <- c(variable.names(jm.cp), "deviance")
jm.nh.names <- c(variable.names(jm.nh), "deviance")
update(jm.hb, n.iter=hbn.burnin)
codaHB =coda.samples(jm.hb,variable.names=jm.hb.names,
n.iter=hbits, thin=hbthin)
hbits
adaptits
q()
