q()
q()
q()
install.packages("devtools")
library(devtools)
install_github("NEONScience/NEON-utilities/neonUtilities", dependencies = TRUE)
install_github("NEONscience/NEON-geolocation/geoNEON")
install.packages("raster")
source("http://bioconductor.org/biocLite.R")
library(devtools)
install_github("NEONScience/NEON-utilities/neonUtilities", dependencies = TRUE)
install_github("NEONscience/NEON-geolocation/geoNEON")
biocLite("rhdf5")
update.packages()
q()
a = 10
c = 10
b = -2
d = 0.01
N = 500
K = 2
y.temp = matrix(data = NA, nrow=N, ncol=K)
y.I = matrix(data = NA, nrow=N, ncol=K)
mu = matrix(data = NA, nrow=N, ncol=K)
x = matrix(data = NA, nrow=N, ncol=K)
y.pred = matrix(data = NA, nrow=N, ncol=K)
for(i in 1:N){
for(k in 1:K){
y.temp[i,k] = rnorm(n=1, mean = mu[i,k], sd = 1)
y.I[i] = rbinom(n=1, size=1,p=0.1)
mu[i,k] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
}
x[i] = runif(n=1,min=1,max=100)
y.pred[i,1] = a + b*x[i]
y.pred[i,2] = c*exp(-d*x[i])
}
warnings()
head(mu)
for(i in 1:N){
x[i] = runif(n=1,min=1,max=100)
y.pred[i,1] = a + b*x[i]
y.pred[i,2] = c*exp(-d*x[i])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.1)
mu[i,k] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
y.temp[i,k] = rnorm(n=1, mean = mu[i,k], sd = 1)
}
}
plot(x, y.pred[,1])
for(i in 1:N){
x[i,1] = runif(n=1,min=1,max=100)
x[i,2] = x[i,1]
y.pred[i,1] = a + b*x[i,1]
y.pred[i,2] = c*exp(-d*x[i,2])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.1)
mu[i,k] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
y.temp[i,k] = rnorm(n=1, mean = mu[i,k], sd = 1)
}
}
plot(x, y.pred[,1])
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
a = 10
c = 10
b = -.02
d = 0.01
N = 500
K = 2
y.temp = matrix(data = NA, nrow=N, ncol=K)
y.I = matrix(data = NA, nrow=N, ncol=K)
mu = matrix(data = NA, nrow=N, ncol=K)
x = matrix(data = NA, nrow=N, ncol=K)
y.pred = matrix(data = NA, nrow=N, ncol=K)
for(i in 1:N){
x[i,1] = runif(n=1,min=1,max=100)
x[i,2] = x[i,1]
y.pred[i,1] = a + b*x[i,1]
y.pred[i,2] = c*exp(-d*x[i,2])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.1)
mu[i,k] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
y.temp[i,k] = rnorm(n=1, mean = mu[i,k], sd = 1)
}
}
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
a = 10
c = 10
b = -.1
d = 0.01
N = 500
K = 2
y.temp = matrix(data = NA, nrow=N, ncol=K)
y.I = matrix(data = NA, nrow=N, ncol=K)
mu = matrix(data = NA, nrow=N, ncol=K)
x = matrix(data = NA, nrow=N, ncol=K)
y.pred = matrix(data = NA, nrow=N, ncol=K)
for(i in 1:N){
x[i,1] = runif(n=1,min=1,max=100)
x[i,2] = x[i,1]
y.pred[i,1] = a + b*x[i,1]
y.pred[i,2] = c*exp(-d*x[i,2])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.1)
mu[i,k] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
y.temp[i,k] = rnorm(n=1, mean = mu[i,k], sd = 1)
}
}
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
a = 10
c = 10
b = -.08
d = 0.01
N = 500
K = 2
y.temp = matrix(data = NA, nrow=N, ncol=K)
y.I = matrix(data = NA, nrow=N, ncol=K)
mu = matrix(data = NA, nrow=N, ncol=K)
x = matrix(data = NA, nrow=N, ncol=K)
y.pred = matrix(data = NA, nrow=N, ncol=K)
for(i in 1:N){
x[i,1] = runif(n=1,min=1,max=100)
x[i,2] = x[i,1]
y.pred[i,1] = a + b*x[i,1]
y.pred[i,2] = c*exp(-d*x[i,2])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.1)
mu[i,k] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
y.temp[i,k] = rnorm(n=1, mean = mu[i,k], sd = 1)
}
}
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
a = 10
c = 10
b = -.09
d = 0.01
N = 500
K = 2
y.temp = matrix(data = NA, nrow=N, ncol=K)
y.I = matrix(data = NA, nrow=N, ncol=K)
mu = matrix(data = NA, nrow=N, ncol=K)
x = matrix(data = NA, nrow=N, ncol=K)
y.pred = matrix(data = NA, nrow=N, ncol=K)
for(i in 1:N){
x[i,1] = runif(n=1,min=1,max=100)
x[i,2] = x[i,1]
y.pred[i,1] = a + b*x[i,1]
y.pred[i,2] = c*exp(-d*x[i,2])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.1)
mu[i,k] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
y.temp[i,k] = rnorm(n=1, mean = mu[i,k], sd = 1)
}
}
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
plot(x[,1], y.temp[,1])
points(x[,1], y.temp[,2],col="red")
for(i in 1:N){
x[i,1] = runif(n=1,min=1,max=100)
x[i,2] = x[i,1]
y.pred[i,1] = a + b*x[i,1]
y.pred[i,2] = c*exp(-d*x[i,2])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.1)
mu[i,k] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
y.temp[i,k] = rnorm(n=1, mean = mu[i,k], sd = .5)
}
}
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
plot(x[,1], y.temp[,1])
points(x[,1], y.temp[,2],col="red")
a = 10
c = 10
b = -.09
d = 0.01
N = 500
K = 1.7
y.temp = matrix(data = NA, nrow=N, ncol=K)
y.I = matrix(data = NA, nrow=N, ncol=K)
mu = matrix(data = NA, nrow=N, ncol=K)
x = matrix(data = NA, nrow=N, ncol=K)
y.pred = matrix(data = NA, nrow=N, ncol=K)
for(i in 1:N){
x[i,1] = runif(n=1,min=1,max=100)
x[i,2] = x[i,1]
y.pred[i,1] = a + b*x[i,1]
y.pred[i,2] = c*exp(-d*x[i,2])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.1)
mu[i,k] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
y.temp[i,k] = rnorm(n=1, mean = mu[i,k], sd = .5)
}
}
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
plot(x[,1], y.temp[,1])
points(x[,1], y.temp[,2],col="red")
a = 10
c = 10
b = -.09
d = 0.008
N = 500
K = 2
y.temp = matrix(data = NA, nrow=N, ncol=K)
y.I = matrix(data = NA, nrow=N, ncol=K)
mu = matrix(data = NA, nrow=N, ncol=K)
x = matrix(data = NA, nrow=N, ncol=K)
y.pred = matrix(data = NA, nrow=N, ncol=K)
for(i in 1:N){
x[i,1] = runif(n=1,min=1,max=100)
x[i,2] = x[i,1]
y.pred[i,1] = a + b*x[i,1]
y.pred[i,2] = c*exp(-d*x[i,2])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.1)
mu[i,k] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
y.temp[i,k] = rnorm(n=1, mean = mu[i,k], sd = .5)
}
}
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
plot(x[,1], y.temp[,1])
points(x[,1], y.temp[,2],col="red")
plot(x[,1], y.temp[,1])
a = 10
c = 10
b = -.09
d = 0.008
N = 500
K = 2
y.temp = matrix(data = NA, nrow=N, ncol=K)
y.I = matrix(data = NA, nrow=N, ncol=K)
mu = matrix(data = NA, nrow=N, ncol=K)
x = matrix(data = NA, nrow=N, ncol=K)
y.pred = matrix(data = NA, nrow=N, ncol=K)
for(i in 1:N){
x[i,1] = runif(n=1,min=1,max=100)
x[i,2] = x[i,1]
mu[i,1] = a + b*x[i,1]
mu[i,2] = c*exp(-d*x[i,2])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.1)
y.pred[i,k] = rnorm(n=1, mean = mu[i,k], sd = .5)
}
y.temp[i,1] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
}
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
a = 10
c = 10
b = -.09
d = 0.008
N = 500
K = 2
y.temp = matrix(data = NA, nrow=N, ncol=K)
a = 10
c = 10
b = -.09
d = 0.008
N = 500
K = 2
y.temp = matrix(data = NA, nrow=N, ncol=K)
y.I = matrix(data = NA, nrow=N, ncol=K)
mu = matrix(data = NA, nrow=N, ncol=K)
x = matrix(data = NA, nrow=N, ncol=K)
y.pred = matrix(data = NA, nrow=N, ncol=K)
for(i in 1:N){
x[i,1] = runif(n=1,min=1,max=100)
x[i,2] = x[i,1]
mu[i,1] = a + b*x[i,1]
mu[i,2] = c*exp(-d*x[i,2])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.1)
y.pred[i,k] = rnorm(n=1, mean = mu[i,k], sd = .5)
}
y.temp[i,1] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
}
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
plot(x[,1], y.temp[,1])
for(i in 1:N){
x[i,1] = runif(n=1,min=1,max=100)
x[i,2] = x[i,1]
mu[i,1] = a + b*x[i,1]
mu[i,2] = c*exp(-d*x[i,2])
for(k in 1:K){
y.I[i] = rbinom(n=1, size=1,p=0.2)
y.pred[i,k] = rnorm(n=1, mean = mu[i,k], sd = .5)
}
y.temp[i,1] = y.I[i]*y.pred[i,1] + (1-y.I[i])*y.pred[i,2]
}
plot(x[,1], y.pred[,1])
points(x[,1], y.pred[,2],col="red")
plot(x[,1], y.temp[,1])
q()
setwd("Z:/common/Projects/mult_comparison/Github/BayesianMultipleComparisons/RealExamples/OrangeTrees")
if("rjags" %in% installed.packages()[,1] == FALSE){
install.packages("rjags", repos="https://cran.cnr.berkeley.edu/")
library(rjags)
} else{
library(rjags)
}
if("coda" %in% installed.packages()[,1] == FALSE){
install.packages("coda", repos="https://cran.cnr.berkeley.edu/")
library(coda)
} else{
library(coda)
}
if("mcmcplots" %in% installed.packages()[,1] == FALSE){
install.packages("mcmcplots", repos="https://cran.cnr.berkeley.edu/")
library(mcmcplots)
} else{
library(mcmcplots)
}
n.chains <- 3
n.burnin <- 100
adaptits <- 1000
hbn.burnin <- 100
hbits <- 2000
hbthin <- 1
cpn.burnin <- 100
cpits <- 2000
cpthin <- 1
nhn.burnin <- 100
nhits <- 2000
nhthin <- 1
indat <- read.csv("data/treegrowth.csv")
attach(indat)
dat <- list(Y=Y, Tree=Tree, Time=Time, N=nrow(indat), Ntree=length(unique(Tree)), Nparms=3)
# Number of trees and number of pairwise comparisons:
Ntree = dat$Ntree
Ncomp = Ntree*(Ntree-1)/2
# Indices for tree-tree pairwise comparisons
pairID = matrix(data =NA, nrow = Ncomp, ncol=2)
ii = 0
for(s1 in 1:(Ntree-1)){
for(s2 in (s1+1):Ntree){
ii = ii +1
pairID[ii,1] = s1
pairID[ii,2] = s2
}
}
data = list(Y=Y, Tree=Tree, Time=Time, N=nrow(indat), Ntree=length(unique(Tree)), Nparms=3, Ncomp=Ncomp, pairID = pairID)
# For CP and NH models:
data.cp = list(Y=Y, Tree=Tree, Time=Time, N=nrow(indat), Ntree=length(unique(Tree)), Nparms=3)
inits.hb = list(list(log.mu.b=log(c(190,40, 20)),tau = 0.005, tau.log.b = 1/(c(0.1,0.5,2)^2)),
list(log.mu.b=log(c(150,30, 60)),tau = 0.05, tau.log.b = 1/(c(0.5,0.2,0.5)^2)),
list(log.mu.b=log(c(195,35, 40)),tau = 0.015, tau.log.b = 1/(c(1,1,1.5))^2))
# Initialize model:
jm.hb <- jags.model(file = "models/R model trees HB.R", data = data, n.chains = n.chains, n.adapt = adaptits, inits=inits.hb)
inits.cp = list(list(log.mu.b=log(c(190,40, 20)),tau = 0.005),
list(log.mu.b=log(c(150,30, 60)),tau = 0.05),
list(log.mu.b=log(c(195,35, 40)),tau = 0.015))
# Initialize model:
jm.cp <- jags.model(file = "models/R model trees CP.R", data = data.cp, n.chains = n.chains, n.adapt = adaptits, inits=inits.cp)
load("inits/nh_inits.Rdata")
# Initialize model:
jm.nh <- jags.model(file = "models/R model trees NH.R", data = data.cp, n.chains = n.chains, n.adapt = adaptits, inits=inits)
jm.hb.names <- c(variable.names(jm.hb), "deviance")
jm.cp.names <- c(variable.names(jm.cp), "deviance")
jm.nh.names <- c(variable.names(jm.nh), "deviance")
load.module("dic")
update(jm.hb, n.iter=hbn.burnin)
codaHB =coda.samples(jm.hb,variable.names=jm.hb.names,
n.iter=hbits, thin=hbthin)
update(jm.cp, n.iter=cpn.burnin)
codaCP =coda.samples(jm.cp,variable.names=jm.cp.names,
n.iter=cpits, thin=cpthin)
update(jm.nh, n.iter=nhn.burnin)
codaNH =coda.samples(jm.nh,variable.names=jm.nh.names,
n.iter=nhits, thin=nhthin)
mcmcplot(codaCP, parms=c("deviance", "mu.b", "sig"))
source("source/PPI.R")
ppi.data <- PPI(codahb = codaHB, codanh = codaNH, codacp = codaCP, name="lpd")
q()
